1
00:00:00,020 --> 00:00:04,639
hey, hôm nay chúng ta học về github và

2
00:00:04,639 --> 00:00:07,759
học về cách quản lý mã nguồn

3
00:00:07,759 --> 00:00:10,759
bạn đang ngồi...

4
00:00:10,759 --> 00:00:14,719
hiện tại bạn không có ý tưởng gì về Github
không một ai nói cho bạn gì về nó

5
00:00:14,720 --> 00:00:19,190
Tôi ở đây và nói về nó,
thật sự nó rất quan trọng

6
00:00:19,190 --> 00:00:23,150
nhiều công ty chuyên nghiệp sử dụng nó
hoặc một cái tương tự..

7
00:00:23,149 --> 00:00:28,759
và mong đợi bạn biết về nó
hay bạn đang ngồi với ai đó đã nghe nói về nó

8
00:00:28,760 --> 00:00:31,789
nhưng bạn sẽ không học được nó dễ dàng

9
00:00:31,789 --> 00:00:36,770
chúng tôi sẽ giúp bạn 
học được nó cách dễ dàng trong 3 bước

10
00:00:36,770 --> 00:00:42,079
bạn có thể sử dụng sub subversion hoặc CVS 

11
00:00:42,079 --> 00:00:44,689
để quản lý mã nguồn bạn muốn học Github

12
00:00:44,689 --> 00:00:49,549
ở đây có thể không phải một hướng dẫn chi tiêt...

13
00:00:49,549 --> 00:00:53,328
bạn phải tìm hiểu nhiều hơn nửa

14
00:00:53,329 --> 00:00:56,600
có một số kiến thức nhỏ,
bạn cần nhận thức nhanh..

15
00:00:56,600 --> 00:00:58,520
Kiểm soát mã nguồn là gì..
what is source control

16
00:00:58,520 --> 00:01:01,730
tại sao nó quan trọng
làm sao mọi người thấy được giá trị của nó

17
00:01:01,729 --> 00:01:05,868
giả sử có hai người..
như màn hinh của tôi chia ở đây.

18
00:01:05,868 --> 00:01:10,998
họ là 2 người bạn thân
ở trên là John và ở dưới là Bobby

19
00:01:10,998 --> 00:01:16,548
hãy nhìn nhận điều này
đây là cùng một tập tin mở trên hai máy của John và Bobby

20
00:01:16,549 --> 00:01:21,499
John sửa một <li> ông ấy add thêm một <li>

21
00:01:21,498 --> 00:01:24,679
<li>sand</li>

22
00:01:24,679 --> 00:01:30,019
now, Bobby muốn thay đổi một điều nào đó
trong file của anh ấy,

23
00:01:30,019 --> 00:01:34,519
anh ấy thêm một dòng riêng của mình
bạn có thể nghĩ

24
00:01:34,519 --> 00:01:39,138
bạn mở đồng thời hai bản sao của một tập tin
nó lộn xộn như bạn thấy...

25
00:01:39,138 --> 00:01:42,798
một công ty có 10 người thì điều lộn xộn này
sẽ như thế nào

26
00:01:42,799 --> 00:01:48,770
Bạn sẽ làm gì khi mọi người ghi đè lên lẫn nhau

27
00:01:48,769 --> 00:01:52,248
bạn cần những người dẫn đầu 
và các công cụ kiểm tra..

28
00:01:52,248 --> 00:01:56,179
hay thật sự không có cách để làm việc..

29
00:01:56,179 --> 00:02:01,399
cùng một tập tin cho nhiều người

30
00:02:01,399 --> 00:02:05,060
mà không bị lãng phí thời gian
để kiểm soát mã nguồn...

31
00:02:05,778 --> 00:02:12,019
điều đó Github sẽ làm git sẽ làm cho bạn
khi bản mở một project git

32
00:02:12,020 --> 00:02:13,430
nó sẽ theo dõi tất cả thay đổi mà bạn làm

33
00:02:13,430 --> 00:02:18,349
vì vậy khi tôi thực hiện thay đổi nó biết và
nó sẽ thực hiện thay đổi...

34
00:02:18,348 --> 00:02:24,259
sau đó tôi có thể kết nối bất kỳ lúc nào 
và xem những thay đổi của người khác

36
00:02:24,259 --> 00:02:28,489
Bobby thêm <li>rope</li> khi John quên..

37
00:02:28,489 --> 00:02:32,150
Tôi không biết là rope,
có thể tôi sẽ đánh vô brick bất kỳ lúc nào

38
00:02:32,150 --> 00:02:36,769
Tôi có thể sync up đến một repository
nó sẽ kéo những thứ mà Bobby đã thực hiện

39
00:02:36,769 --> 00:02:40,938
lưu thay đổi lại và tôi sẽ không đánh mất
những gì Bobby đã thay đổi

40
00:02:40,938 --> 00:02:45,680
nó cũng thay đổi tất cả người khác

41
00:02:45,680 --> 00:02:49,669
và Bobby cũng có sync up vào repository 
và lấy về - get từ repository

42
00:02:49,669 --> 00:02:54,169
tôi có thể thay đổi mọi thứ trong lúc bạn có thể lấy nó
được gọi là merge conflict

43
00:02:54,169 --> 00:02:57,290
đó là cả khi tôi chỉnh sửa dòng này
mortar -> good mortar

44
00:02:57,289 --> 00:03:04,098
Tôi gọi nó là good mortar còn
Bobby thì gọi nó là more mortar và

45
00:03:04,098 --> 00:03:06,768
và nếu anh ấy save lại và tôi sync vào repositories

46
00:03:06,769 --> 00:03:10,968
nó sẽ không biết chỉ một ai là đúng..
nó chỉ biết tôi thay đổi này...

47
00:03:10,968 --> 00:03:14,989
.. và Bobby đã thay đổi...

48
00:03:14,989 --> 00:03:28,098
source control kiểm soát mã nguồn
quản lý theo phiên bản version

49
00:03:28,098 --> 00:03:35,539
như thế này, nó sẽ nói rõ về conflict

50
00:03:35,539 --> 00:03:38,810
....

51
00:03:38,810 --> 00:03:42,169
Bobby thay đổi, Tôi đã thay đổi lại

52
00:03:42,169 --> 00:03:45,290
và tôi biết những gì tôi thay đổi là đúng
good mortar + more mortar => more good mortar

53
00:03:45,289 --> 00:03:50,269
tôi sửa đổi,
tôi sẽ lưu tập tin lại và bây giờ

54
00:03:50,269 --> 00:03:55,639
Tôi đã phải tự nhập thay đỏi đó thủ công
vấn đề vẫn xảy ra,..

55
00:03:55,639 --> 00:03:57,500
.. nhưng github sẽ gắn cờ cho bạn flag

56
00:03:57,500 --> 00:04:01,519
những thứ mà hai người phải làm
sẽ được giảm thiểu

57
00:04:01,519 --> 00:04:04,579
bời vì không có cách nào khác...

58
00:04:04,579 --> 00:04:08,719
để đảm bảo communication tốt,
cho nhiều người làm việc chung


61
00:04:16,009 --> 00:04:20,000
Vì thế hãy làm project trên Github

62
00:04:20,000 --> 00:04:25,399
Những thiết lập đầu tiên bạn cần phải làm với github-git

63
00:04:25,399 --> 00:04:26,709
Cài đặt Github trên máy của bạn

64
00:04:26,709 --> 00:04:30,068
Bạn và bạn của bạn phải
đăng ký tài khoản Github trên github.com

65
00:04:30,069 --> 00:04:40,418
đăng ký Github miễn phí và bạn phải tải
và cài đặt ứng dụng github lên máy


67
00:04:40,418 --> 00:04:44,740
bạn cần xem xét có cần cài git visual cho máy bạn không

68
00:04:44,740 --> 00:04:49,269
tôi không sử dụng ứng dụng trực quan git visual tool

69
00:04:49,959 --> 00:04:52,989
Visual applications của git cung cấp cho bạn..

70
00:04:52,990 --> 00:04:58,060
một giao diện dễ dàng sử dụng

71
00:04:58,060 --> 00:05:03,728
nó không thật sự để học..

72
00:05:03,728 --> 00:05:09,728
command line thì nó không thật sự khó
chỉ khoảng hơn năm lệnh

73
00:05:09,728 --> 00:05:13,449
nhưng nhiều người lại
tránh nhìn vào cái màn hình đen

74
00:05:13,449 --> 00:05:17,259
nhưng chúng ta vượt qua nó,
ngày hôm nay có một thời gian tuyệt vời nên..

75
00:05:17,259 --> 00:05:22,840
tôi sẽ tạo repository mới

76
00:05:22,839 --> 00:05:30,519
cho bất kỳ một project nào..

78
00:05:36,009 --> 00:05:41,110
Tôi khởi tạo - initialized 
của repository với một readme

79
00:05:41,110 --> 00:05:42,968
điều đó cho phép tôi sao chép - clone
ngay lập tức

80
00:05:42,968 --> 00:05:46,389
Tôi sẽ cho bạn nhìn thấy những gì gọi là một repository mới

81
00:05:46,389 --> 00:05:47,500
mà tôi gọi nó là thử nghiệm "nougat"

82
00:05:47,500 --> 00:05:51,250
Tôi tồn tại một file đầu tiên gọi là readme
và tất cả bên trong readme là..

83
00:05:51,250 --> 00:05:55,089
chứa bất kỳ hướng dẫn nào về project

84
00:05:55,089 --> 00:05:58,448
khi bạn cung cấp cho bất kỳ ai sử dụng repository

85
00:05:58,449 --> 00:06:04,960
tôi sẽ cho bạn thấy 
repository sẽ làm gì ở đây

86
00:06:04,959 --> 00:06:08,019
tôi copy clone URL

87
00:06:08,019 --> 00:06:12,000
URL tôi sử dụng thể get nó về máy của tôi
ok, đó là tất cả điều cần phải làm cho gitHub

89
00:06:12,459 --> 00:06:16,388
bây giờ tôi bắt đầu sử dụng command line

90
00:06:16,389 --> 00:06:20,319
rất nhiều người trong các bạn 
tránh sử dụng command line vì sọ hãi nó

91
00:06:20,319 --> 00:06:30,129
... nếu bạn đang trên máy Mac,
bạn chỉ cần biết 3 lệnh để sử dụng

93
00:06:30,129 --> 00:06:35,228
và trên Windows là 5 lệnh

94
00:06:35,228 --> 00:06:37,120
với Mac bạn Utilities

95
00:06:37,120 --> 00:06:38,910
và chọn Terminal

96
00:06:38,910 --> 00:06:44,279
và ở Windows bạn mở CMD lên

98
00:06:44,279 --> 00:06:53,429
về cơ bản lệnh cd để thay đổi thư mục

99
00:06:53,430 --> 00:06:54,420
tôi muốn đến thư mục..

100
00:06:54,420 --> 00:06:57,870
...

102
00:07:08,310 --> 00:07:12,209
đó là lệnh cd đầu tiên, còn lệnh khác là ls

103
00:07:12,209 --> 00:07:16,439
ls để bạn có thể thấy một danh sách
tập tin thư mục hiện hành

104
00:07:16,439 --> 00:07:22,589
Windows sẽ là dir

105
00:07:22,589 --> 00:07:28,169
bạn thấy có vài tập tin trong document

106
00:07:28,170 --> 00:07:32,370
Tôi muốn push repository và document 

107
00:07:32,370 --> 00:07:38,000
Tôi sẽ dán URL git clone

109
00:07:38,519 --> 00:07:42,509
nó cần một repository và 
nó sao chép toàn bộ dữ liệu vào forder đó

110
00:07:42,509 --> 00:07:47,430
tôi sẽ gõ lệnh ls cho bạn xem

111
00:07:47,430 --> 00:07:53,730
bạn có thể nhìn thấy folder gitTest và newGitTest

112
00:07:53,730 --> 00:07:57,870
và tôi có readme.md file duy nhất

113
00:07:57,870 --> 00:08:01,139


114
00:08:01,139 --> 00:08:06,990
sau tất cả bây giờ hãy để tôi thêm vài thư mục

115
00:08:06,990 --> 00:08:11,250
tôi đã có thể làm với bạn

116
00:08:11,250 --> 00:08:15,480
bạn không nhất thiết phải làm theo
những đều tôi đang nói

117
00:08:15,480 --> 00:08:19,080
John và Bobby thì không làm giống nhau

118
00:08:19,079 --> 00:08:24,479
Bobby thì không clone Readme.md
anh ấy chỉ git clone URL

119
00:08:25,079 --> 00:08:30,180
Bobby và John cùng làm việc trên dự án nên cùng URL

120
00:08:30,180 --> 00:08:34,620
tôi đã sao chép nhân bản một thư mục khác

121
00:08:34,620 --> 00:08:40,560
trên máy tính của bạn sẽ khác 
path folder với chúng tôi

123
00:08:41,099 --> 00:08:46,200
vì hai chúng tôi đều có chung kho lưu trữ
<cùng làm trên một máy>

124
00:08:46,200 --> 00:08:51,040
và tôi sẽ tạo một tập tin mới cho John,
tôi lưu nó là..

125
00:08:51,039 --> 00:09:01,720
gitTests với file index.html
chúng ta gõ cái gì đó

127
00:09:05,350 --> 00:09:10,540
chúng tôi sẽ lập ra một danh sách

128
00:09:10,539 --> 00:09:17,828
bricks và mortar 
và tôi save nó lại

129
00:09:17,828 --> 00:09:23,500
tôi đã có index.html 
nhưng Bobby không có bất cứ điều gì

130
00:09:23,500 --> 00:09:26,379
bởi vì anh ấy chỉ làm riêng của anh ấy

131
00:09:26,379 --> 00:09:31,600
ở đây tôi tạo tập tin cho Bobby 
và tôi gọi nó là..

132
00:09:32,230 --> 00:09:39,250
index2.html

133
00:09:43,929 --> 00:09:51,039
tôi sẽ gõ vài thứ....

134
00:09:51,039 --> 00:09:55,299
hai file index- làm trên project...

135
00:09:55,299 --> 00:09:57,068
đó là tất cả đều mà 2 người đã thực hiện
trong quá trình làm

136
00:09:57,068 --> 00:10:01,120
ở đây ta bắt đầu với lệnh đầu tiên git clone

137
00:10:01,120 --> 00:10:04,568
nó sẽ pushed đến repository với URL

138
00:10:04,568 --> 00:10:10,149
Tiếp theo lệnh để xem trạng thái

139
00:10:10,149 --> 00:10:15,278
ta sẽ nhận ra được sự khác nhau giữa server và local

140
00:10:15,278 --> 00:10:18,759
khác nhau là có một tập tin untracked

141
00:10:18,759 --> 00:10:22,750
nó gọi là index.html 
Github server thì không tồn tại nó

142
00:10:22,750 --> 00:10:27,399
vì vậy giờ tôi sẽ đưa nó..

143
00:10:27,399 --> 00:10:33,458
thêm bất kỳ thay đổi hay bất kỳ tập tin nào mới vào
có tên là...

144
00:10:33,458 --> 00:10:34,989
index.html

145
00:10:34,990 --> 00:10:40,000
git status một lần nửa

146
00:10:40,000 --> 00:10:46,360
thông báo nó hiện tại đã thay đổi committed 
ta có một file mới index.html


148
00:10:46,360 --> 00:10:50,889
sau khi tôi added tôi sẽ có thể commit nó

149
00:10:50,889 --> 00:10:58,120
nghĩa là tôi đã đưa nó vào kho ở local

150
00:10:58,120 --> 00:11:01,839
tôi đã để lại một message
một quotes

151
00:11:01,839 --> 00:11:02,529
"add index.html"

152
00:11:02,528 --> 00:11:08,948
index.html đã được committed
nhưng nó vẫn còn ở trên máy tôi

153
00:11:09,850 --> 00:11:14,889
nó đã vào repository
nhưng nó không synced up đến github.com

154
00:11:14,889 --> 00:11:18,549
tất cả chúng sẽ được đẩy lên server

155
00:11:19,179 --> 00:11:24,039
git push

156
00:11:24,039 -->  00:11:30,399
giờ tôi truy cập github.com
tôi sẽ thấy index.html

158
00:11:30,399 --> 00:11:34,240
tôi sẽ ẩn trình duyệt xuống

159
00:11:34,990 --> 00:11:42,159
Bobby thì git pull

160
00:11:42,159 --> 00:11:46,990
để lấy project từ Github.com

161
00:11:46,990 --> 00:11:54,730
git pull chỉ làm việc newGitTest

162
00:11:54,730 --> 00:12:00,610
khi tôi chuyển đúng về repository
thì tôi mới có thể get về

163
00:12:00,610 --> 00:12:04,990
trên các máy tính khác đường dẫn sẽ khác

164
00:12:04,990 --> 00:12:07,839
nhìn nó kéo về index.html

165
00:12:07,839 --> 00:12:13,059
bây giờ Bobby đã có cả hai index-

166
00:12:13,058 --> 00:12:16,058
Bobby cũng sẽ thêm một phần tử
vào danh sách của John

167
00:12:16,688 --> 00:12:22,000
<li>sand</li>, now git status

168
00:12:22,000 --> 00:12:28,929
Tôi nhìn thấy chỉnh sửa trong index.html
và tôi có untracked file

169
00:12:28,929 --> 00:12:37,989
tôi nhận được index.html và index2.html

170
00:12:37,990 --> 00:12:43,899
đã thay đổi commit index.html

171
00:12:43,899 --> 00:12:47,649
và một tập tin untracked index2.html

172
00:12:47,649 --> 00:12:49,808
file đó chưa sẵn sàng để commited

173
00:12:49,808 --> 00:12:57,278
tôi có thể add thêm một fiel

174
00:12:57,278 --> 00:13:02,558
làm tất cả thư mục của bạn có thể add -A

176
00:13:09,970 --> 00:13:13,209
git status và hai file đã sẵn sàng

177
00:13:13,208 --> 00:13:15,500
mõi sửa đổi nó sẽ có một branch mới

178
00:13:15,500 --> 00:13:21,590
tôi đã làm một điều tệ, thay đổi bằng commit

180
00:13:22,610 --> 00:13:27,560
điều đó không phải điều hữu ích cho bất kỳ ai..

181
00:13:28,399 --> 00:13:36,230
tôi đãy push và bây giờ tôi có thể pull nó về

182
00:13:36,980 --> 00:13:40,009
nhưng trước khi ấy tôi cần đầy đủ quyền

183
00:13:40,009 --> 00:13:46,309
file index.html của tôi tự cập nhật thay đổi

185
00:13:50,240 --> 00:13:53,240
có thể thay đổi miễn là mọi người đẩy chúng lên

186
00:13:53,750 --> 00:13:57,769
vậy làm thế nào để biết thông báo thất bại

187
00:13:57,769 --> 00:14:04,250
chúng ta có git status; git commit; git pull

188
00:14:04,820 --> 00:14:08,210
Các vấn đề cơ bản của Github

189
00:14:08,210 --> 00:14:12,920
có khoảng 10 lệnh..

190
00:14:12,919 --> 00:14:20,539
tất cả lệnh mà tôi sử dụng đã được là  khá nhiều

191
00:14:20,539 --> 00:14:24,319
Bắt đầu với github nói chút về
kinh nghiệm công việc

192
00:14:24,320 --> 00:14:28,129
làm thế nào để bạn hiểu được điều tôi làm

193
00:14:28,129 --> 00:14:29,389
bắt đầu mõi ngày

194
00:14:29,389 --> 00:14:33,259
tôi bắt đầu bằng git pull

195
00:14:33,259 --> 00:14:35,600
cập nhật tất cả những gì tôi biết


199
00:14:50,269 --> 00:14:54,079
nó thật sự làm thay đổi

200
00:14:54,080 --> 00:15:05,180
và bây giờ tôi đã sẵn sàng để push nó lên


202
00:15:08,809 --> 00:15:13,519
đồng bộ tất cả công việc vào repository

203
00:15:14,210 --> 00:15:19,009
tôi đã làm điều này..

204
00:15:19,009 --> 00:15:25,250
có thể commit suốt ngày hoặc vài giờ...

205
00:15:25,250 --> 00:15:29,210
tôi chắc đồng bộ...

207
00:15:30,049 --> 00:15:34,399
chúng ta đã tạo ra cái gọi là conflict

208
00:15:34,399 --> 00:15:38,240
tôi sẽ thay đổi
mortar => more mortar

209
00:15:38,960 --> 00:15:45,620
tôi đang làm một ví dụ để git commit

210
00:15:47,120 --> 00:15:56,360
gõ lên Bobby..

211
00:15:56,360 --> 00:16:02,659
tôi đã tạo một thay đổi

213
00:16:03,649 --> 00:16:09,470
Tôi nói về xung đột của index-

214
00:16:10,460 --> 00:16:14,300
bạn có thể khắc phục xung đột sau đó commit

215
00:16:14,299 --> 00:16:17,719
cơ bản là bạn xem các thay đổi...

216
00:16:17,720 --> 00:16:21,080
giống như tôi đang làm điều này

217
00:16:21,080 --> 00:16:24,290
tất cả tôi làm ở trên..

218
00:16:24,289 --> 00:16:29,389
chúng tôi đang thay đổi dòng mà người khác đang thay đổi

219
00:16:30,139 --> 00:16:34,279
Github không đủ thông minh để biết ta muốn gì


221
00:16:34,850 --> 00:16:38,149
nó không sao

222
00:16:38,149 --> 00:16:41,059
khi add vào cần phải get

223
00:16:41,059 --> 00:16:45,169
nhiều hơn những gì tôi nghĩ

224
00:16:45,169 --> 00:16:50,269
tôi sửa lại nhanh chóng..


226
00:16:51,440 --> 00:16:54,830
ông ấy thật sự không biết điều này..

227
00:16:54,830 --> 00:16:59,960
tự đưa ra quyết định tôi xóa tất cả..

228
00:16:59,960 --> 00:17:04,850
bây giờ chỉ có git commit không có gì trong đó

229
00:17:06,048 --> 00:17:12,709
chúng ta thêm một commit

230
00:17:13,368 --> 00:17:18,828
tiếp tục với branch master

231
00:17:18,828 --> 00:17:22,519
bạn quyên gõ tin nhắn sẽ...

232
00:17:22,519 --> 00:17:25,099
không thể...


234
00:17:33,528 --> 00:17:39,829
bạn có thể gộp các branch

235
00:17:39,829 --> 00:17:41,808
đó là tất cả mọi thứ..

236
00:17:41,808 --> 00:17:45,230
chỉ cần viết...

237
00:17:45,230 --> 00:17:50,028
 commit full

238
00:17:50,028 --> 00:17:55,099
tôi thật nhanh chóng

239
00:17:55,849 --> 00:18:01,819
git commit -m 
241
00:18:03,499 --> 00:18:07,909
và thông báo một tin nhắn

242
00:18:07,909 --> 00:18:10,909
nó có một thông báo

243
00:18:19,990 --> 00:18:24,039
nó giống như một multi-line commit

244
00:18:24,039 --> 00:18:25,779
thông báo phải viết hao

245
00:18:25,779 --> 00:18:39,250
và bây giờ...

246
00:18:39,250 --> 00:18:41,319
tôi đã xóa dòng đó

247
00:18:41,319 --> 00:18:47,619
lần nửa git commit và git add

248
00:18:47,619 --> 00:18:50,589
git pushed và git pull

249
00:18:50,589 --> 00:18:52,419
đó có lẽ một ngày tuyệt với

